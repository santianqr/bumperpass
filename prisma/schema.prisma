// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Plate {
    id          String   @id @default(cuid())
    plate       String   @unique
    available   Boolean
    userId      String
    user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    createdAt   DateTime @default(now())
    vehicleType String
    state       String
}

model CustomPlate {
    id          String   @id @default(cuid())
    plate       String   @unique
    userId      String
    user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    createdAt   DateTime @default(now())
    description String
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String              @id @default(cuid())
    name          String?
    email         String?             @unique
    emailVerified DateTime?
    password      String?
    middleName    String?
    lastName      String?
    phone         String?
    city          String?
    zipCode       String?
    currentPlate  String?             @unique
    vin           String?             @unique
    state         String?             @default("ca")
    street        String?
    unit          String?
    suscribe      Boolean             @default(false)
    image         String?
    accounts      Account[]
    sessions      Session[]
    plate         Plate[]
    customPlate   CustomPlate[]
    tokens        VerificationToken[]
}

model VerificationToken {
    id         Int      @id @default(autoincrement())
    token      String   @unique
    expires    DateTime
    identifier String
    user       User     @relation(fields: [identifier], references: [id], onDelete: Cascade)
}
